// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: backend.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Backend_RegisterExecutor_FullMethodName        = "/flame.Backend/RegisterExecutor"
	Backend_UnregisterExecutor_FullMethodName      = "/flame.Backend/UnregisterExecutor"
	Backend_BindExecutor_FullMethodName            = "/flame.Backend/BindExecutor"
	Backend_BindExecutorCompleted_FullMethodName   = "/flame.Backend/BindExecutorCompleted"
	Backend_UnbindExecutor_FullMethodName          = "/flame.Backend/UnbindExecutor"
	Backend_UnbindExecutorCompleted_FullMethodName = "/flame.Backend/UnbindExecutorCompleted"
	Backend_LaunchTask_FullMethodName              = "/flame.Backend/LaunchTask"
	Backend_CompleteTask_FullMethodName            = "/flame.Backend/CompleteTask"
)

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The backend service of Lava, which is used to communicate with service sdk,
// e.g. register executor, invoke tasks and so on.
type BackendClient interface {
	RegisterExecutor(ctx context.Context, in *RegisterExecutorRequest, opts ...grpc.CallOption) (*Result, error)
	UnregisterExecutor(ctx context.Context, in *UnregisterExecutorRequest, opts ...grpc.CallOption) (*Result, error)
	BindExecutor(ctx context.Context, in *BindExecutorRequest, opts ...grpc.CallOption) (*BindExecutorResponse, error)
	BindExecutorCompleted(ctx context.Context, in *BindExecutorCompletedRequest, opts ...grpc.CallOption) (*Result, error)
	UnbindExecutor(ctx context.Context, in *UnbindExecutorRequest, opts ...grpc.CallOption) (*Result, error)
	UnbindExecutorCompleted(ctx context.Context, in *UnbindExecutorCompletedRequest, opts ...grpc.CallOption) (*Result, error)
	LaunchTask(ctx context.Context, in *LaunchTaskRequest, opts ...grpc.CallOption) (*LaunchTaskResponse, error)
	CompleteTask(ctx context.Context, in *CompleteTaskRequest, opts ...grpc.CallOption) (*Result, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) RegisterExecutor(ctx context.Context, in *RegisterExecutorRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Backend_RegisterExecutor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) UnregisterExecutor(ctx context.Context, in *UnregisterExecutorRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Backend_UnregisterExecutor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) BindExecutor(ctx context.Context, in *BindExecutorRequest, opts ...grpc.CallOption) (*BindExecutorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindExecutorResponse)
	err := c.cc.Invoke(ctx, Backend_BindExecutor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) BindExecutorCompleted(ctx context.Context, in *BindExecutorCompletedRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Backend_BindExecutorCompleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) UnbindExecutor(ctx context.Context, in *UnbindExecutorRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Backend_UnbindExecutor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) UnbindExecutorCompleted(ctx context.Context, in *UnbindExecutorCompletedRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Backend_UnbindExecutorCompleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) LaunchTask(ctx context.Context, in *LaunchTaskRequest, opts ...grpc.CallOption) (*LaunchTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LaunchTaskResponse)
	err := c.cc.Invoke(ctx, Backend_LaunchTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) CompleteTask(ctx context.Context, in *CompleteTaskRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, Backend_CompleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
// All implementations must embed UnimplementedBackendServer
// for forward compatibility.
//
// The backend service of Lava, which is used to communicate with service sdk,
// e.g. register executor, invoke tasks and so on.
type BackendServer interface {
	RegisterExecutor(context.Context, *RegisterExecutorRequest) (*Result, error)
	UnregisterExecutor(context.Context, *UnregisterExecutorRequest) (*Result, error)
	BindExecutor(context.Context, *BindExecutorRequest) (*BindExecutorResponse, error)
	BindExecutorCompleted(context.Context, *BindExecutorCompletedRequest) (*Result, error)
	UnbindExecutor(context.Context, *UnbindExecutorRequest) (*Result, error)
	UnbindExecutorCompleted(context.Context, *UnbindExecutorCompletedRequest) (*Result, error)
	LaunchTask(context.Context, *LaunchTaskRequest) (*LaunchTaskResponse, error)
	CompleteTask(context.Context, *CompleteTaskRequest) (*Result, error)
	mustEmbedUnimplementedBackendServer()
}

// UnimplementedBackendServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackendServer struct{}

func (UnimplementedBackendServer) RegisterExecutor(context.Context, *RegisterExecutorRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExecutor not implemented")
}
func (UnimplementedBackendServer) UnregisterExecutor(context.Context, *UnregisterExecutorRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterExecutor not implemented")
}
func (UnimplementedBackendServer) BindExecutor(context.Context, *BindExecutorRequest) (*BindExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindExecutor not implemented")
}
func (UnimplementedBackendServer) BindExecutorCompleted(context.Context, *BindExecutorCompletedRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindExecutorCompleted not implemented")
}
func (UnimplementedBackendServer) UnbindExecutor(context.Context, *UnbindExecutorRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindExecutor not implemented")
}
func (UnimplementedBackendServer) UnbindExecutorCompleted(context.Context, *UnbindExecutorCompletedRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindExecutorCompleted not implemented")
}
func (UnimplementedBackendServer) LaunchTask(context.Context, *LaunchTaskRequest) (*LaunchTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchTask not implemented")
}
func (UnimplementedBackendServer) CompleteTask(context.Context, *CompleteTaskRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTask not implemented")
}
func (UnimplementedBackendServer) mustEmbedUnimplementedBackendServer() {}
func (UnimplementedBackendServer) testEmbeddedByValue()                 {}

// UnsafeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServer will
// result in compilation errors.
type UnsafeBackendServer interface {
	mustEmbedUnimplementedBackendServer()
}

func RegisterBackendServer(s grpc.ServiceRegistrar, srv BackendServer) {
	// If the following call pancis, it indicates UnimplementedBackendServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Backend_ServiceDesc, srv)
}

func _Backend_RegisterExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).RegisterExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_RegisterExecutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).RegisterExecutor(ctx, req.(*RegisterExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_UnregisterExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).UnregisterExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_UnregisterExecutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).UnregisterExecutor(ctx, req.(*UnregisterExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_BindExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).BindExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_BindExecutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).BindExecutor(ctx, req.(*BindExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_BindExecutorCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindExecutorCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).BindExecutorCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_BindExecutorCompleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).BindExecutorCompleted(ctx, req.(*BindExecutorCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_UnbindExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).UnbindExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_UnbindExecutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).UnbindExecutor(ctx, req.(*UnbindExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_UnbindExecutorCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindExecutorCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).UnbindExecutorCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_UnbindExecutorCompleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).UnbindExecutorCompleted(ctx, req.(*UnbindExecutorCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_LaunchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).LaunchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_LaunchTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).LaunchTask(ctx, req.(*LaunchTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_CompleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).CompleteTask(ctx, req.(*CompleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backend_ServiceDesc is the grpc.ServiceDesc for Backend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flame.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterExecutor",
			Handler:    _Backend_RegisterExecutor_Handler,
		},
		{
			MethodName: "UnregisterExecutor",
			Handler:    _Backend_UnregisterExecutor_Handler,
		},
		{
			MethodName: "BindExecutor",
			Handler:    _Backend_BindExecutor_Handler,
		},
		{
			MethodName: "BindExecutorCompleted",
			Handler:    _Backend_BindExecutorCompleted_Handler,
		},
		{
			MethodName: "UnbindExecutor",
			Handler:    _Backend_UnbindExecutor_Handler,
		},
		{
			MethodName: "UnbindExecutorCompleted",
			Handler:    _Backend_UnbindExecutorCompleted_Handler,
		},
		{
			MethodName: "LaunchTask",
			Handler:    _Backend_LaunchTask_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _Backend_CompleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}
