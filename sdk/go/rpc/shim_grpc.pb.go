// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: shim.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcShimClient is the client API for GrpcShim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcShimClient interface {
	OnSessionEnter(ctx context.Context, in *SessionContext, opts ...grpc.CallOption) (*Result, error)
	OnTaskInvoke(ctx context.Context, in *TaskContext, opts ...grpc.CallOption) (*TaskOutput, error)
	OnSessionLeave(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Result, error)
}

type grpcShimClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcShimClient(cc grpc.ClientConnInterface) GrpcShimClient {
	return &grpcShimClient{cc}
}

func (c *grpcShimClient) OnSessionEnter(ctx context.Context, in *SessionContext, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/flame.GrpcShim/OnSessionEnter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcShimClient) OnTaskInvoke(ctx context.Context, in *TaskContext, opts ...grpc.CallOption) (*TaskOutput, error) {
	out := new(TaskOutput)
	err := c.cc.Invoke(ctx, "/flame.GrpcShim/OnTaskInvoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcShimClient) OnSessionLeave(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/flame.GrpcShim/OnSessionLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcShimServer is the server API for GrpcShim service.
// All implementations must embed UnimplementedGrpcShimServer
// for forward compatibility
type GrpcShimServer interface {
	OnSessionEnter(context.Context, *SessionContext) (*Result, error)
	OnTaskInvoke(context.Context, *TaskContext) (*TaskOutput, error)
	OnSessionLeave(context.Context, *EmptyRequest) (*Result, error)
	mustEmbedUnimplementedGrpcShimServer()
}

// UnimplementedGrpcShimServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcShimServer struct {
}

func (UnimplementedGrpcShimServer) OnSessionEnter(context.Context, *SessionContext) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSessionEnter not implemented")
}
func (UnimplementedGrpcShimServer) OnTaskInvoke(context.Context, *TaskContext) (*TaskOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnTaskInvoke not implemented")
}
func (UnimplementedGrpcShimServer) OnSessionLeave(context.Context, *EmptyRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSessionLeave not implemented")
}
func (UnimplementedGrpcShimServer) mustEmbedUnimplementedGrpcShimServer() {}

// UnsafeGrpcShimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcShimServer will
// result in compilation errors.
type UnsafeGrpcShimServer interface {
	mustEmbedUnimplementedGrpcShimServer()
}

func RegisterGrpcShimServer(s grpc.ServiceRegistrar, srv GrpcShimServer) {
	s.RegisterService(&GrpcShim_ServiceDesc, srv)
}

func _GrpcShim_OnSessionEnter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcShimServer).OnSessionEnter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flame.GrpcShim/OnSessionEnter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcShimServer).OnSessionEnter(ctx, req.(*SessionContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcShim_OnTaskInvoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcShimServer).OnTaskInvoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flame.GrpcShim/OnTaskInvoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcShimServer).OnTaskInvoke(ctx, req.(*TaskContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcShim_OnSessionLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcShimServer).OnSessionLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flame.GrpcShim/OnSessionLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcShimServer).OnSessionLeave(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcShim_ServiceDesc is the grpc.ServiceDesc for GrpcShim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcShim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flame.GrpcShim",
	HandlerType: (*GrpcShimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnSessionEnter",
			Handler:    _GrpcShim_OnSessionEnter_Handler,
		},
		{
			MethodName: "OnTaskInvoke",
			Handler:    _GrpcShim_OnTaskInvoke_Handler,
		},
		{
			MethodName: "OnSessionLeave",
			Handler:    _GrpcShim_OnSessionLeave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shim.proto",
}
