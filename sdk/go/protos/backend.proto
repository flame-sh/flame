syntax = "proto3";

import "types.proto";

package flame;

option go_package = "github.com/flame-sh/flame/sdk/go/rpc";

/*
  The backend service of Lava, which is used to communicate with service sdk,
  e.g. register executor, invoke tasks and so on.
 */
service Backend {
  rpc RegisterExecutor (RegisterExecutorRequest) returns (Result) {}
  rpc UnregisterExecutor (UnregisterExecutorRequest) returns (Result) {}

  rpc BindExecutor (BindExecutorRequest) returns (BindExecutorResponse) {}
  rpc BindExecutorCompleted (BindExecutorCompletedRequest) returns (Result) {}

  rpc UnbindExecutor (UnbindExecutorRequest) returns (Result) {}
  rpc UnbindExecutorCompleted (UnbindExecutorCompletedRequest) returns (Result) {}

  rpc LaunchTask (LaunchTaskRequest) returns (LaunchTaskResponse) {}
  rpc CompleteTask(CompleteTaskRequest) returns (Result) {}
}

message RegisterExecutorRequest {
  string executor_id = 1;
  ExecutorSpec executor_spec = 2;
}

message UnregisterExecutorRequest {
  string executor_id = 1;
}

message BindExecutorRequest {
  string executor_id = 1;
}

message BindExecutorResponse {
  Application application = 1;
  Session session = 2;
}

message BindExecutorCompletedRequest {
  string executor_id = 1;
}

message UnbindExecutorRequest {
  string executor_id = 1;
}

message UnbindExecutorCompletedRequest {
  string executor_id = 1;
}

message LaunchTaskRequest {
  string executor_id = 1;
}

message LaunchTaskResponse {
  // If no more task in the session, the result is empty.
  optional Task task = 1;
}

message CompleteTaskRequest {
  string executor_id = 1;
  optional bytes task_output = 2;
}