syntax = "proto3";

package flame;

option go_package = "github.com/flame-sh/flame/sdk/go/rpc";

message Metadata {
  string id = 1;
  string name = 2;
  optional string owner = 3;
}

enum SessionState {
  Open = 0;
  Closed = 1;
}

message SessionStatus {
  SessionState state = 1;

  int64 creation_time = 2;
  optional int64 completion_time = 3;

  int32 pending = 4;
  int32 running = 5;
  int32 succeed = 6;
  int32 failed = 7;
}

message SessionSpec {
  string application = 2;
  int32 slots = 3;
  optional bytes common_data = 4;
}

message Session {
  Metadata metadata = 1;
  SessionSpec spec = 2;
  SessionStatus status = 3;
}

enum TaskState {
  Pending = 0;
  Running = 1;
  Succeed = 2;
  Failed = 3;
}

message TaskStatus {
  TaskState state = 1;

  int64 creation_time = 2;
  optional int64 completion_time = 3;
}

message TaskSpec {
  string session_id = 2;

  optional bytes input = 3;
  optional bytes output = 4;
}

message Task {
  Metadata metadata = 1;
  TaskSpec spec = 2;
  TaskStatus status = 3;
}

enum Shim {
  Log = 0;
  Stdio = 1;
  Wasm = 2;
  Shell = 3;
  Grpc = 4;
}

enum ApplicationState {
  Enabled = 0;
  Disabled = 1;
}

message ApplicationStatus {
  ApplicationState state = 1;

  int64 creation_time = 2;
}

message Environment {
  string name = 1;
  string value = 2;
}

message ApplicationSpec {
  Shim shim = 1;
  optional string description = 2;
  repeated string labels = 3;
  optional string image = 4;
  optional string command = 5;
  repeated string arguments = 6;
  repeated Environment environments = 7;
  optional string working_directory = 8;
  optional int32 max_instances = 9;
  optional int64 delay_release = 10;
}

message Application {
  Metadata metadata = 1;
  ApplicationSpec spec = 2;
  ApplicationStatus status = 3;
}

message ExecutorSpec {
  string node = 1;
  ResourceRequirement resreq = 2;
}

/* 
 * void --> idle --> releasing --> released
 *          ↑  |
 *          |  binding
 *  unbinding  |
 *          |  ↓
 *          bound 
 */

enum ExecutorState {
  ExecutorUnknown = 0;
  ExecutorVoid = 1;
  ExecutorIdle = 2;
  ExecutorBinding = 3;
  ExecutorBound = 4;
  ExecutorUnbinding = 5;
  ExecutorReleasing = 6;
  ExecutorReleased = 7;
}

message ExecutorStatus {
  ExecutorState state = 1;
}

message Executor {
  Metadata metadata = 1;
  ExecutorSpec spec = 2;
  ExecutorStatus status = 3;
}

message SessionList {
  repeated Session sessions = 1;
}

message ApplicationList {
  repeated Application applications = 1;
}

message ResourceRequirement {
  uint64 cpu = 1;
  uint64 memory = 2;
}

message NodeSpec {

}

enum NodeState {
  Unknown = 0;
  Ready = 1;
  NotReady = 2;
}

message NodeInfo {
  string arch = 1;
  string os = 2;
}

message NodeStatus {
  NodeState state = 1;
  ResourceRequirement capacity = 2;
  ResourceRequirement allocatable = 3;
  NodeInfo info = 4;
}

message Node {
  Metadata metadata = 1;
  NodeSpec spec = 2;
  NodeStatus status = 3;
}

message Result {
  int32 return_code = 1;
  optional string message = 2;
}

message EmptyRequest {
}

message Allocation {
  ResourceRequirement resreq = 1;
  uint32 replica = 2;
}
